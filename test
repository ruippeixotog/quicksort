#!/bin/bash

function assert {
  if [ "$1" != "$2" ]; then
    echo "Wrong answer! Expected [$1], found [$2]"
    if [ -n "$3" ]; then
      echo "(input array was [$3])"
    fi
    exit 1
  fi
}

function run_suite {
  prog=${*:2}

  exec 5< "../_test/$1.in"

  read input_n <&5
  while [[ -n $input_n ]]; do
    read input_arr <&5
    printf "$input_n\n$input_arr\n" | $prog
    read input_n <&5
  done

  exec 5<&-
}

function test_suite {
  prog=${*:2}

  exec 5< "../_test/$1.in"
  exec 6< "../_test/$1.out"

  read expected <&6
  while [[ -n $expected ]]; do
    read input_n <&5
    read input_arr <&5
    actual=$(printf "$input_n\n$input_arr\n" | $prog)
    assert "$expected" "$actual" "$input_arr"
    read expected <&6
  done

  exec 5<&-
  exec 6<&-
  echo "All tests in dataset $1 passed!"
}

function test_static {
  prog=$@
  expected='1 2 3 4 5 6 7 8 9 10'
  actual=$($prog)
  assert "$expected" "$actual"

  echo "Static test passed!"
}

if [ $1 == "all" ]; then
  for lang in $(ls -d */ | egrep -v '^_' | tr -d /); do
    echo "Testing $lang version..."
    ./test $lang
  done
  exit 0
fi

cd $1 || exit 1

case $1 in
  apl) wget -q -nc https://raw.githubusercontent.com/ngn/apl/f31f06/lib/apl.js && \
       chmod +x apl.js && \
       test_suite test1 ./apl.js quicksort.apl
       ;;
  assembly) nasm -g -f elf quicksort.asm && \
            gcc -m32 -o quicksort quicksort.o && \
            test_suite test1 ./quicksort
            ;;
  bash) test_suite test1 bash quicksort.sh
        ;;
  bash-pipes) test_suite test1 bash quicksort.sh
              ;;
  c) gcc quicksort.c -o quicksort && \
     test_suite test1 ./quicksort
     ;;
  clojure) test_suite test1 clojure quicksort.clj
           ;;
  c#) mcs Quicksort.cs && \
      test_suite test1 mono Quicksort.exe
      ;;
  c++) g++ quicksort.cpp -o quicksort && \
       test_suite test1 ./quicksort
       ;;
  erlang) test_suite test1 escript quicksort.erl
          ;;
  fortran) gfortran -O3 -o quicksort quicksort.f90 && \
           test_suite test1 ./quicksort
           ;;
  f#) fsharpc --nologo Quicksort.fs && \
      test_suite test1 mono Quicksort.exe
      ;;
  go) go build quicksort.go && \
      test_suite test1 ./quicksort
      ;;
  groovy) test_suite test1 groovy quicksort.groovy
          ;;
  haskell) ghc quicksort.hs -v0 -o quicksort && \
           test_suite test1 ./quicksort
           ;;
  idris) idris quicksort.idr -o quicksort && \
         test_suite test1 ./quicksort
         ;;
  io) test_suite test1 io quicksort.io
      ;;
  java) javac Quicksort.java && \
        test_suite test1 java Quicksort
        ;;
  javascript) test_suite test1 node quicksort.js
              ;;
  joy) test_static joy quicksort.joy
       ;;
  kotlin) kotlinc quicksort.kt && \
          test_suite test1 kotlin QuicksortKt
          ;;
  lisp) test_suite test1 clisp quicksort.lisp
        ;;
  lua) test_suite test1 lua quicksort.lua
       ;;
  pascal) fpc -v0 quicksort.pas && \
          test_suite test1 ./quicksort
          ;;
  perl) test_suite test1 perl quicksort.pl
        ;;
  php) php -S localhost:8000 > /dev/null 2>&1 &
       trap "kill -9 $!" EXIT
       sleep 1
       test_static curl -s localhost:8000/quicksort.php
       ;;
  prolog) swipl -q --stand_alone=true --goal=main --toplevel=halt \
            --foreign=save -o quicksort -c quicksort.pl && \
          test_suite test1 ./quicksort
          ;;
  python) test_suite test1 python quicksort.py
          ;;
  racket) test_suite test1 racket quicksort.rkt
          ;;
  ruby) test_suite test1 ruby quicksort.rb
        ;;
  rust) rustc quicksort.rs && \
        test_suite test1 ./quicksort
        ;;
  scala) scalac Quicksort.scala && \
         test_suite test1 scala Quicksort
         ;;
  scala-typelevel) scalac -language:_ Quicksort.scala && \
                   test_static scala Quicksort
                   ;;
  sml) ml-build quicksort.cm Quicksort.main sml-image > /dev/null && \
       test_suite test1 sml @SMLload=sml-image
       ;;
  swift) swiftc quicksort.swift && \
         test_suite test1 ./quicksort
         ;;
  vb.net) vbnc -nologo -quiet Quicksort.vb && \
          test_suite test1 mono Quicksort.exe
          ;; 
esac
